// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: password_reset_tokens.sql

package database

import (
	"context"
)

const createPasswordResetToken = `-- name: CreatePasswordResetToken :exec
INSERT INTO password_reset_tokens (email, created_at, token)
VALUES ($1, NOW(), $2)
ON CONFLICT (email) DO UPDATE
SET created_at = NOW(), token = $2
`

type CreatePasswordResetTokenParams struct {
	Email string
	Token string
}

// create a new password reset token for the given email or update the existing one
func (q *Queries) CreatePasswordResetToken(ctx context.Context, arg CreatePasswordResetTokenParams) error {
	_, err := q.db.ExecContext(ctx, createPasswordResetToken, arg.Email, arg.Token)
	return err
}

const deletePasswordResetToken = `-- name: DeletePasswordResetToken :exec
DELETE FROM password_reset_tokens WHERE email = $1
`

func (q *Queries) DeletePasswordResetToken(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deletePasswordResetToken, email)
	return err
}

const getPasswordResetTokenByEmail = `-- name: GetPasswordResetTokenByEmail :one
SELECT email, token, created_at FROM password_reset_tokens WHERE email = $1
`

func (q *Queries) GetPasswordResetTokenByEmail(ctx context.Context, email string) (PasswordResetToken, error) {
	row := q.db.QueryRowContext(ctx, getPasswordResetTokenByEmail, email)
	var i PasswordResetToken
	err := row.Scan(&i.Email, &i.Token, &i.CreatedAt)
	return i, err
}
