// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: categories.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (id, created_at, updated_at, name, slug, description, is_active)
VALUES ($1, NOW(), NOW(), $2, $3, $4, $5) RETURNING id, name, slug, description, is_active, created_at, updated_at
`

type CreateCategoryParams struct {
	ID          uuid.UUID
	Name        string
	Slug        string
	Description sql.NullString
	IsActive    bool
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory,
		arg.ID,
		arg.Name,
		arg.Slug,
		arg.Description,
		arg.IsActive,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.Description,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCategories = `-- name: GetCategories :many

SELECT id, name, slug, description, is_active, created_at, updated_at
FROM categories
WHERE (COALESCE($1::text, '') = '' OR name ILIKE '%' || $1 || '%')
   AND ($2::bool IS NULL OR is_active = $2)
`

type GetCategoriesParams struct {
	Column1 string
	Column2 sql.NullBool
}

// SELECT *
// FROM categories
// WHERE (COALESCE($1::text, ”) = ” OR name ILIKE '%' || $1 || '%')
//
//	AND (is_active = COALESCE($2::bool, is_active));
func (q *Queries) GetCategories(ctx context.Context, arg GetCategoriesParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getCategories, arg.Column1, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoriesByStatus = `-- name: GetCategoriesByStatus :many
SELECT id, name, slug, description, is_active, created_at, updated_at FROM categories WHERE is_active = $1 ORDER BY name ASC
`

// sql query to get all categories by status
func (q *Queries) GetCategoriesByStatus(ctx context.Context, isActive bool) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, getCategoriesByStatus, isActive)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategorySubCategories = `-- name: GetCategorySubCategories :many


SELECT id, name, slug, description, is_active, category_id, created_at, updated_at FROM sub_categories WHERE category_id = $1
`

// -- name: GetCategories :many
// -- sql query to get all categories and then it will sort the result by name
// SELECT * FROM categories ORDER BY name ASC;
// sql query to get all subcategories of a category
func (q *Queries) GetCategorySubCategories(ctx context.Context, categoryID uuid.UUID) ([]SubCategory, error) {
	rows, err := q.db.QueryContext(ctx, getCategorySubCategories, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubCategory
	for rows.Next() {
		var i SubCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Slug,
			&i.Description,
			&i.IsActive,
			&i.CategoryID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
